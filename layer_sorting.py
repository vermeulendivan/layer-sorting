# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayerSorting
                                 A QGIS plugin
 Sorts QGIS layers according to geometry type
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-24
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Kartoza
        email                : vermeulendivan@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

<<<<<<< HEAD
from qgis.core import QgsProject, QgsMapLayerType, QgsGeometry, QgsWkbTypes
=======
<<<<<<< HEAD
from qgis.core import QgsProject, QgsMapLayerType, QgsGeometry, QgsWkbTypes
=======
<<<<<<< HEAD
from qgis.core import QgsProject, QgsMapLayerType, QgsGeometry, QgsWkbTypes
=======
from qgis.core import QgsProject, QgsMapLayerType
>>>>>>> 9f6abeb52e4e4f2668dc5d6c0ea13770bac5b666
>>>>>>> 2ceec8c3df79a3d9a24c9afd999d4ff6b33de41c
>>>>>>> 4d364fe8716d758852be7025ad7bbbc0460175b9

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .layer_sorting_dialog import LayerSortingDialog
import sys, os.path


class LayerSorting:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LayerSorting_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Layer sorting')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('LayerSorting', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/layer_sorting/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Layer sorting'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Layer sorting'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = LayerSortingDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
<<<<<<< HEAD

=======
<<<<<<< HEAD

=======
        
>>>>>>> 2ceec8c3df79a3d9a24c9afd999d4ff6b33de41c
>>>>>>> 4d364fe8716d758852be7025ad7bbbc0460175b9
        # OK has been pressed
        if result:
            print('start')
            
<<<<<<< HEAD
            project_root = QgsProject.instance().layerTreeRoot()
            list_tree_layers = project_root.children()
            
            list_layers = []  # Stores the QgsVectorLayers
            dict_layers = {}  # Store layers according to geometry type
            for tree_layer in list_tree_layers:  # Loops through all of the layers
                layer = tree_layer.layer()  # QgsVectorLayer object
                
                layer_id, layer_type, layer_name, layer_feature_cnt, layer_geom = self.get_layer_info(tree_layer, layer)
            
                # Stores the information for a layer in a dictionary
                if layer_geom not in dict_layers:
                    dict_layers.update({layer_geom:[[layer_name, layer_id, tree_layer, layer_type, layer_feature_cnt]]})
                else:
                    dict_layers[layer_geom].append([layer_name, layer_id, tree_layer, layer_type, layer_feature_cnt])
            
            self.sort_layers(project_root, dict_layers)
=======
<<<<<<< HEAD
            project_root = QgsProject.instance().layerTreeRoot()
            list_tree_layers = project_root.children()
            
            list_layers = []
            dict_layers = {}
            for tree_layer in list_tree_layers:
                layer = tree_layer.layer()
                layer_id = tree_layer.layerId()
                layer_type = self.get_layer_type(layer)
                
                if layer_type == "vector":
                    layer_name = tree_layer.name()
                    layer_feature_cnt = layer.featureCount()
                    layer_geom = self.get_geometry_type(layer)
                elif layer_type == "raster":
                    layer_name = tree_layer.name()
                    layer_feature_cnt = None
                    layer_geom = "pixels"
            
                # Stores the information for a layer in a dictionary
                if layer_type not in dict_layers:
                    dict_layers.update({layer_type:[[layer_name, layer_id, tree_layer, layer_geom, layer_feature_cnt]]})
                else:
                    dict_layers[layer_type].append([layer_name, layer_id, tree_layer, layer_geom, layer_feature_cnt])
            
            print("TEST: " + str(dict_layers))
            
            #order = self.arrange_layers(dict_layers)
            
            #bla = []
            #for knof in list_child:
            #    bla.append(list_child.pop())
            
            #root.insertChildNodes(0, bla)
            
            #for test in list_child:
            #    root.removeChildNode(test)
=======
            list_layers = QgsProject.instance().mapLayers()
            for layer_id, layer in list_layers.items():
                layer_name = layer.name()
<<<<<<< HEAD
                layer_type = self.get_layer_type(layer)
                layer_geom = None
                
                if layer_type == "vector":
                    print("Name: " + layer_name)
                    print("Type: " + layer_type)
                    layer_geom = self.get_geometry_type(layer)
                    print("Geom: " + layer_geom)
                
                
                
            #self.arrange_layers(list_layers)
>>>>>>> 2ceec8c3df79a3d9a24c9afd999d4ff6b33de41c
>>>>>>> 4d364fe8716d758852be7025ad7bbbc0460175b9
            
            print('end')
        

<<<<<<< HEAD
    # Gets information of the layer from the tree_layer and layer objects
    # Layer ID, type, name, feature count, and geometry type
    def get_layer_info(self, tree_layer, layer):
        layer_id = tree_layer.layerId()
        layer_type = self.get_layer_type(layer)  # Raster or vector
                
        # Check whether the layer is vector or raster
        if layer_type == "vector":
            layer_name = tree_layer.name()
            layer_feature_cnt = layer.featureCount()
            layer_geom = self.get_geometry_type(layer)
        elif layer_type == "raster":
            layer_name = tree_layer.name()
            layer_feature_cnt = None
            layer_geom = "pixel"
        
        return layer_id, layer_type, layer_name, layer_feature_cnt, layer_geom

=======
>>>>>>> 4d364fe8716d758852be7025ad7bbbc0460175b9

    # Determines the layer type and returns a string
    def get_layer_type(self, layer):
        layer_type = layer.type()
        if layer_type == QgsMapLayerType.RasterLayer:
            return "raster"
        elif layer_type == QgsMapLayerType.VectorLayer:
            return "vector"
        
        return "UNKNOWN LAYER TYPE"
    
    # Gets the geometry type from a layer feature
    def get_geometry_type(self, layer):
<<<<<<< HEAD
        geom = layer.geometryType()
        if geom == 0:  # Point vectors
            return "point"
        elif geom == 1:  # Polyline vectors
            return "line"
        elif geom == 2:  # Polygon vectors
            return "polygon"
            
        return "UNKNOWN GEOMETRY TYPE"
    

    # Sorts the layers
    def sort_layers(self, project_root, dict_layers):
        
        for raster in dict_layers.get("pixel"):
                orig_layer_tree = raster[2]
                clone_layer_tree = orig_layer_tree.clone()
                
                project_root.insertChildNodes(0, [clone_layer_tree])
                project_root.removeChildNode(orig_layer_tree)
        
        for polygon in dict_layers.get("polygon"):
                orig_layer_tree = polygon[2]
                clone_layer_tree = orig_layer_tree.clone()
                
                project_root.insertChildNodes(0, [clone_layer_tree])
                project_root.removeChildNode(orig_layer_tree)
        
        for line in dict_layers.get("line"):
                orig_layer_tree = line[2]
                clone_layer_tree = orig_layer_tree.clone()
                
                project_root.insertChildNodes(0, [clone_layer_tree])
                project_root.removeChildNode(orig_layer_tree)
        
        for point in dict_layers.get("point"):
                orig_layer_tree = point[2]
                clone_layer_tree = orig_layer_tree.clone()
                
                project_root.insertChildNodes(0, [clone_layer_tree])
                project_root.removeChildNode(orig_layer_tree)









=======
<<<<<<< HEAD
        geom = layer.geometryType()
        if geom == 0:
            return "point"
        elif geom == 1:
            return "line"
        elif geom == 2:
            return "polygon"
=======
        features = layer.getFeatures()
        
        geom = None
        for feature in features:
            geom = feature.geometry()
            break
        
        # If the layer is not empty and the geometry type could be determined
        if geom is not None:
            wkb_type = geom.wkbType()
            
            if wkb_type == QgsWkbTypes.Point or wkb_type == QgsWkbTypes.MultiPoint:
                return "point"
            elif wkb_type == QgsWkbTypes.LineString or wkb_type == QgsWkbTypes.CompoundCurve or wkb_type == QgsWkbTypes.MultiCurve or wkb_type == QgsWkbTypes.MultiLineString:
                return "line"
            elif wkb_type == QgsWkbTypes.Polygon or wkb_type == QgsWkbTypes.MultiPolygon or wkb_type == QgsWkbTypes.CurvePolygon or wkb_type == QgsWkbTypes.MultiSurface:
                return "polygon"
>>>>>>> 2ceec8c3df79a3d9a24c9afd999d4ff6b33de41c
            
        return "UNKNOWN GEOMETRY TYPE"
        
        
<<<<<<< HEAD
    # Rearranges the layers in QGIS
    def arrange_layers(self, list_layers):
        print("arrange layers")
=======
    def arrange_layers(self, list_layers):
        print("test")
>>>>>>> 2ceec8c3df79a3d9a24c9afd999d4ff6b33de41c
        
        bridge = self.iface.layerTreeCanvasBridge()
        order = bridge.rootGroup().customLayerOrder()
        
<<<<<<< HEAD
        print("PRIOR ORDER: " + str(order))
        
        order.reverse()
        
        return order
        
        
        #vector = order[5]
        #print("TEST: " + str(vector.geometryType()))
        
        
        #print("NEW ORDER: " + str(order))
=======
        print("ORDER: " + str(order))
        
        
        
        
        
        
        
        
>>>>>>> 2ceec8c3df79a3d9a24c9afd999d4ff6b33de41c
        
    
    
    
<<<<<<< HEAD
=======
=======
                layer_type = layer.type()
                #test = layer.geometry()
                
                if layer_type == QgsMapLayerType.RasterLayer:
                    print("Raster name: " + layer_name)
                elif layer_type == QgsMapLayerType.VectorLayer:
                    print("Vector name: " + layer_name)
                    feat = layer.getFeatures()
                    for feature in feat:
                        geom = feature.geometry()
                        print("geom: " + str(geom))
                

            
            print('end')
>>>>>>> 9f6abeb52e4e4f2668dc5d6c0ea13770bac5b666
>>>>>>> 2ceec8c3df79a3d9a24c9afd999d4ff6b33de41c
>>>>>>> 4d364fe8716d758852be7025ad7bbbc0460175b9
